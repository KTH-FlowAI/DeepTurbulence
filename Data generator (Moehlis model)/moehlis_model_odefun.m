function da = moehlis_model_odefun(~, a, Re)
%%
% ODE function - contains the system of ODEs for 9 amplitudes 
% from Moehlis et al.
%
% The code has been used for the results in:
% "Predictions of turbulent shear flows using deep neural networks"
% P.A. Srinivasan, L. Guastoni, H. Azizpour, P. Schlatter, R. Vinuesa
% Physical Review Fluids (accepted)
%%

global A B C k1 k2 k3

da = zeros(9, 1);

da(1) = B^2/Re - B^2/Re*a(1) ...
    - 1.5^0.5          *B*C       /k3        *a(6)*a(8) ...
    + 1.5^0.5          *B*C       /k2        *a(2)*a(3);

da(2) = -(4*B^2/3 + C^2)/Re*a(2) ...
    + (5/3)*(2/3)^0.5  *C^2       /k1        *a(4)*a(6) ...
    - 1/6^0.5          *C^2       /k1        *a(5)*a(7) ...
    - 1/6^0.5          *A*B*C     /k1/k3     *a(5)*a(8) ...
    - 1.5^0.5          *B*C       /k2        *a(1)*a(3) ...
    - 1.5^0.5          *B*C       /k2        *a(3)*a(9);

da(3) = -(B^2 + C^2)/Re*a(3) ...
    + 2/6^0.5          *A*B*C     /k1/k2     *a(4)*a(7) ...
    + 2/6^0.5          *A*B*C     /k1/k2     *a(5)*a(6) ...
    + 1/6^0.5*(B^2*(3*A^2 + C^2) - 3*C^2*(A^2 + C^2))/k1/k2/k3*a(4)*a(8);

da(4) = -(3*A^2 + 4*B^2)/3/Re*a(4) ...
    - 1/6^0.5          *A                    *a(1)*a(5) ...
    - 10/3/6^0.5       *A^2       /k1        *a(2)*a(6) ...
    - 1.5^0.5          *A*B*C     /k1/k2     *a(3)*a(7) ...
    - 1.5^0.5          *A^2*B^2   /k1/k2/k3  *a(3)*a(8) ...
    - 1/6^0.5          *A                    *a(5)*a(9);

da(5) = -(A^2 + B^2)/Re*a(5) ...
    + 1/6^0.5          *A                    *a(1)*a(4) ...
    + 1/6^0.5          *A^2       /k1        *a(2)*a(7) ...
    - 1/6^0.5          *A*B*C     /k1/k3     *a(2)*a(8) ...
    + 1/6^0.5          *A                    *a(4)*a(9) ...
    + 2/6^0.5          *A*B*C     /k1/k2     *a(3)*a(6);

da(6) = -(3*A^2 + 4*B^2 + 3*C^2)/3/Re*a(6) ...
    + 1/6^0.5          *A                    *a(1)*a(7) ...
    + 1.5^0.5          *B*C       /k3        *a(1)*a(8) ...
    + 10/3/6^0.5       *(A^2-C^2) /k1        *a(2)*a(4) ...
    - 2*(2/3)^0.5      *A*B*C     /k1/k2     *a(3)*a(5) ...
    + 1/6^0.5          *A                    *a(7)*a(9) ...
    + 1.5^0.5          *B*C       /k3        *a(8)*a(9);

da(7) = -(A^2 + B^2 + C^2)/Re*a(7) ...
    - 1/6^0.5          *A                    *a(1)*a(6) ...
    - 1/6^0.5          *A                    *a(6)*a(9) ...
    + 1/6^0.5          *(C^2-A^2) /k1        *a(2)*a(5) ...
    + 1/6^0.5          *A*B*C     /k1/k2     *a(3)*a(4);

da(8) = -(A^2 + B^2 + C^2)/Re*a(8) ...
    + 2/6^0.5          *A*B*C     /k1/k3     *a(2)*a(5) ...
    + 1/6^0.5*C^2*(3*A^2 - B^2 + 3*C^2)/k1/k2/k3*a(3)*a(4);

da(9) = -9*B^2/Re*a(9) ...
    + 1.5^0.5          *B*C       /k2        *a(2)*a(3) ...
    - 1.5^0.5          *B*C       /k3        *a(6)*a(8);

end
